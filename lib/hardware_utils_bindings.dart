// AUTO GENERATED BY JNIGEN 0.14.2. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: comment_references
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `com.example.note_book.KotlinHardwareUtils`
class KotlinHardwareUtils extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<KotlinHardwareUtils> $type;

  @jni$_.internal
  KotlinHardwareUtils.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'com/example/note_book/KotlinHardwareUtils');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $KotlinHardwareUtils$NullableType();
  static const type = $KotlinHardwareUtils$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory KotlinHardwareUtils() {
    return KotlinHardwareUtils.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_getHardwareKotlinUtils = _class.instanceMethodId(
    r'getHardwareKotlinUtils',
    r'()Ljava/util/Map;',
  );

  static final _getHardwareKotlinUtils = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.util.Map<java.lang.String, java.lang.String> getHardwareKotlinUtils()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JMap<jni$_.JString, jni$_.JString> getHardwareKotlinUtils() {
    return _getHardwareKotlinUtils(
            reference.pointer, _id_getHardwareKotlinUtils as jni$_.JMethodIDPtr)
        .object<jni$_.JMap<jni$_.JString, jni$_.JString>>(
            const jni$_.JMapType<jni$_.JString, jni$_.JString>(
                jni$_.JStringType(), jni$_.JStringType()));
  }

  static final _id_customShowToast = _class.instanceMethodId(
    r'customShowToast',
    r'(Landroid/app/Activity;Ljava/lang/CharSequence;I)V',
  );

  static final _customShowToast = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `public final void customShowToast(android.app.Activity activity, java.lang.CharSequence charSequence, int i)`
  void customShowToast(
    jni$_.JObject activity,
    jni$_.JObject charSequence,
    int i,
  ) {
    final _$activity = activity.reference;
    final _$charSequence = charSequence.reference;
    _customShowToast(
            reference.pointer,
            _id_customShowToast as jni$_.JMethodIDPtr,
            _$activity.pointer,
            _$charSequence.pointer,
            i)
        .check();
  }
}

final class $KotlinHardwareUtils$NullableType
    extends jni$_.JObjType<KotlinHardwareUtils?> {
  @jni$_.internal
  const $KotlinHardwareUtils$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lcom/example/note_book/KotlinHardwareUtils;';

  @jni$_.internal
  @core$_.override
  KotlinHardwareUtils? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : KotlinHardwareUtils.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<KotlinHardwareUtils?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($KotlinHardwareUtils$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($KotlinHardwareUtils$NullableType) &&
        other is $KotlinHardwareUtils$NullableType;
  }
}

final class $KotlinHardwareUtils$Type
    extends jni$_.JObjType<KotlinHardwareUtils> {
  @jni$_.internal
  const $KotlinHardwareUtils$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lcom/example/note_book/KotlinHardwareUtils;';

  @jni$_.internal
  @core$_.override
  KotlinHardwareUtils fromReference(jni$_.JReference reference) =>
      KotlinHardwareUtils.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<KotlinHardwareUtils?> get nullableType =>
      const $KotlinHardwareUtils$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($KotlinHardwareUtils$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($KotlinHardwareUtils$Type) &&
        other is $KotlinHardwareUtils$Type;
  }
}
